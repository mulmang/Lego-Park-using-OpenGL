///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2011 Haangilsoft, Ltd.
// #203, 204, Jang YoungShill Hall, 1688-5 Shinil-dong, Daeduk-gu, Daejeon Metropolitan City, Korea, 306-230
// This code may not by copied or distributed or reused without permission from Haangilsoft.
//
//	DataStream, 2000-2012
//	Jinhong Kim
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"

#include "DataStream.h"
#include <stdio.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static DI16 __strlen(char* str)
{
	DI16 len = 0;
	while(*str++) len++;
	return len;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CDataStream::CDataStream(void)
{
	hFile = NULL;
	err = 0;
	file_size = 0;
	buf_ptr = NULL;
	buf_cur_ptr = NULL;
	buf_last_ptr = NULL;
	bDMA = FALSE;

	bOpenToRead = TRUE;
	bOpenToReadStream	= FALSE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CDataStream::CDataStream(char* fn)
{
	hFile = NULL;
	err = 0;
	file_size = 0;
	buf_ptr = NULL;
	buf_cur_ptr = NULL;
	buf_last_ptr = NULL;
	bDMA= FALSE;

	bOpenToRead = TRUE;
	bOpenToReadStream	= FALSE;

	Init(fn);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CDataStream::~CDataStream(void)
{
	Close();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDataStream::Close(void)
{
	if(buf_ptr && !bDMA)
		VirtualFree(buf_ptr, 0, MEM_RELEASE);

	if(hFile)
		CloseHandle(hFile);

	hFile = NULL;
	err = 0;
	file_size = 0;
	buf_ptr = NULL;
	buf_cur_ptr = NULL;
	buf_last_ptr = NULL;
	bDMA = FALSE;
	bOpenToRead = TRUE;	
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDataStream::Init(char *fname)
{
	DI16 len = __strlen(fname);
	CopyMemory((void*)file_name, (void*)fname, len+1); 
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDataStream::InitDirectMemoryAccess(char *buf, DWORD speclen)
{
	buf_ptr = (DI8*)buf;
	buf_cur_ptr = buf_ptr;
	bDMA = TRUE;
	err = 0;

	if(0 == speclen) {
		buf_last_ptr	= 0;
	}else{
		buf_last_ptr	= buf_ptr + speclen;
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD CDataStream::MemoryToFile(DWORD len)
{
	if(NULL == bDMA || NULL == hFile)
		return 0;

	DWORD written;
	WriteFile(hFile, (void*)buf_ptr, len, &written, NULL);

	return written;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CDataStream::OpenToReadStream(void)
{
	hFile = CreateFileA(file_name, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	
	if(hFile == INVALID_HANDLE_VALUE) {
		hFile = NULL;
		return FALSE;
	}

	file_size = GetFileSize(hFile, NULL);

	buf_ptr = NULL;
	buf_cur_ptr = NULL;
	buf_last_ptr = NULL;

	bOpenToRead = FALSE;
	bOpenToReadStream	= TRUE;

	return TRUE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CDataStream::OpenToRead(void)
{
	hFile = CreateFileA(file_name, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	
	if(hFile == INVALID_HANDLE_VALUE) {
		hFile = NULL;
		return FALSE;
	}

	file_size = GetFileSize(hFile, NULL);

	DWORD	Get_size;
	buf_ptr = (DI8*)VirtualAlloc(NULL, file_size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	buf_cur_ptr = buf_ptr;
	buf_last_ptr = buf_ptr + file_size - 1;

	ReadFile(hFile, (void*)buf_ptr, file_size, &Get_size, NULL);

	CloseHandle(hFile);
	hFile = NULL;

	bOpenToRead = TRUE;

	return TRUE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CDataStream::OpenToWrite(void)
{
	hFile = CreateFileA(file_name, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
	
	if(hFile == INVALID_HANDLE_VALUE) {
		hFile = NULL;
		return FALSE;
	}

	bOpenToRead = FALSE;

	return TRUE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CDataStream::CreateToWrite(void)
{
	hFile = CreateFileA(file_name, GENERIC_READ | GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
	
	if(hFile == INVALID_HANDLE_VALUE) {
		hFile = NULL;
		return FALSE;
	}

	bOpenToRead = FALSE;

	return TRUE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDataStream::Seek(int pos)
{
	if(bOpenToRead) {
		buf_cur_ptr = buf_ptr + pos;
		return;
	}

	if(bDMA) {
		buf_cur_ptr = buf_ptr + pos;
	}else{
		SetFilePointer(hFile, pos, NULL, FILE_BEGIN);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDataStream::Skip(int pos)
{
	if(bOpenToRead) {
		buf_cur_ptr += pos;
		return;
	}

	if(bDMA) {
		buf_cur_ptr += pos;
	}else{
		SetFilePointer(hFile, pos, NULL, FILE_CURRENT);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDataStream::SkipBack(int pos)
{
	if(bOpenToRead) {
		buf_cur_ptr -= pos;
		return;
	}

	if(bDMA) {
		buf_cur_ptr -= pos;
	}else{
		SetFilePointer(hFile, -(LONG)pos, NULL, FILE_CURRENT);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDataStream::Current(int* pos)
{
	if(bOpenToRead) {
		*pos = (int)(buf_cur_ptr - buf_ptr);
		return;
	}

	if(bDMA) {
		*pos = (int)(buf_cur_ptr - buf_ptr);
	}else{
		*pos = SetFilePointer(hFile, 0, NULL, FILE_CURRENT);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDataStream::Rewind(void)
{
	if(bOpenToRead) {
		buf_cur_ptr = buf_ptr;
		return;
	}

	if(bDMA) {
		buf_cur_ptr = buf_ptr;
	}else{
		SetFilePointer(hFile, 0, NULL, FILE_BEGIN);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CDataStream::IsEnd(void)
{
	if(bOpenToReadStream) {
		return ERROR_HANDLE_EOF == GetLastError();
	}

	if(bOpenToRead && buf_cur_ptr >= buf_last_ptr) {
		return TRUE;
	}

	if(buf_cur_ptr >= buf_last_ptr && bDMA) {
		return TRUE;
	}

	return FALSE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD CDataStream::GetBlock(void *v, int len)
{
	if(bOpenToReadStream) {
		DWORD readbytes = 0;
		ReadFile(hFile, v, len, &readbytes, NULL);
		return readbytes;
	}

	if(buf_cur_ptr > buf_last_ptr /*&& !bDMA*/) {
		err = 1;
		//*v = NULL;
		return 0;
	}

	memcpy( v, buf_cur_ptr, len );
	buf_cur_ptr += len;
	
	return len;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<typename T>
void CDataStream::PutData(T *v, int len)
{
	if(bDMA) {
		for(int i=0; i < len; i++) {
			*(T*)buf_cur_ptr = *(v+i);
			buf_cur_ptr += sizeof(T);
		}
	}else{
		DWORD written = 0;
		WriteFile(hFile, (void*)v, sizeof(T) * len, &written, NULL);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDataStream::PutBlock(void *v, int len)
{
	if(bDMA) {
		CopyMemory((void*)buf_cur_ptr, v, len);
		buf_cur_ptr += len;
	}else{
		DWORD written;
		WriteFile(hFile, (void*)v, len, &written, NULL);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
